using static TACTLib.Core.Product.Tank.ManifestCryptoHandler;
using static TACTLib.Core.Product.Tank.ResourceGraph;

namespace TACTLib.Core.Product.Tank.TRG
{
    [ManifestCrypto(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProTRG_116744 : ITRGEncryptionProc
    {
        public byte[] Key(TRGHeader header, int length)
        {
            byte[] buffer = new byte[length];
            uint kidx, okidx;
            kidx = okidx = Keytable[length + 256];
            for (uint i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                switch (SignedMod(kidx, 3))
                {
                case 0:
                    kidx += 1273;
                    break;
                case 1:
                    kidx = (uint)SignedMod(kidx * 4, header.m_buildVersion);
                    break;
                case 2:
                    kidx -= 17;
                    break;
                }
            }
            return buffer;
        }

        public byte[] IV(TRGHeader header, byte[] digest, int length)
        {
            byte[] buffer = new byte[length];
            uint kidx, okidx;
            kidx = okidx = (uint)(2 * digest[7]);
            for (int i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += (uint)header.m_packageCount + digest[SignedMod(header.m_packageCount, SHA1_DIGESTSIZE)];
                buffer[i] = digest[SignedMod(kidx, SHA1_DIGESTSIZE)];
            }
            return buffer;
        }

        private static readonly byte[] Keytable =
        {
            0x7A, 0x75, 0xAC, 0xD2, 0x57, 0xCA, 0xD9, 0x1B, 0x93, 0x62, 0xA2, 0x2B, 0x6A, 0xDA, 0x9E, 0xCF, 
            0x68, 0x48, 0x09, 0x56, 0xBC, 0x95, 0x7B, 0xF1, 0x2B, 0x79, 0x92, 0x57, 0x93, 0xAA, 0xEA, 0x71, 
            0x65, 0xF9, 0x22, 0x48, 0xCB, 0xE2, 0x3E, 0x4F, 0x6B, 0x4F, 0x42, 0xE6, 0xE4, 0x23, 0xC0, 0xAA, 
            0x7A, 0x5D, 0x7E, 0xA4, 0xDD, 0xD5, 0x41, 0x2A, 0xE7, 0x74, 0x64, 0xC6, 0x1D, 0xE8, 0x0E, 0x32, 
            0x14, 0xA9, 0x13, 0xF5, 0x2D, 0x00, 0x3B, 0x3B, 0xC0, 0xCA, 0xF4, 0x94, 0x7A, 0x91, 0xD8, 0x54, 
            0x7E, 0xD6, 0x3C, 0x76, 0x20, 0x05, 0xA3, 0x53, 0x20, 0x47, 0x92, 0xCF, 0x8B, 0x0B, 0x6A, 0xFC, 
            0x04, 0x26, 0x22, 0xD1, 0x39, 0xBC, 0x3D, 0xC7, 0xB7, 0x34, 0x5A, 0xE5, 0xFF, 0x98, 0x6D, 0x94, 
            0x2A, 0x91, 0x16, 0x2E, 0x79, 0xF4, 0xD7, 0xDD, 0xC8, 0xDB, 0x30, 0xCD, 0xFC, 0xF0, 0xC7, 0x7A, 
            0xA1, 0x5B, 0x19, 0x07, 0x9A, 0x0F, 0x77, 0x71, 0x5D, 0x25, 0xA4, 0x8C, 0xF6, 0x17, 0xCD, 0x6F, 
            0x75, 0xC7, 0x62, 0xD4, 0xAB, 0x18, 0x34, 0xC6, 0x27, 0x2F, 0x7D, 0x33, 0xDD, 0xA3, 0xD2, 0x43, 
            0xB4, 0x5A, 0x8F, 0xDC, 0xD5, 0x69, 0x88, 0x34, 0xAA, 0xFC, 0x31, 0xDE, 0x93, 0x38, 0x2C, 0x3C, 
            0x0E, 0x11, 0x64, 0x9E, 0x7E, 0xD0, 0x9A, 0x1D, 0x7E, 0x7C, 0xD5, 0x15, 0x03, 0x58, 0x57, 0x43, 
            0x5D, 0xCB, 0x07, 0x7D, 0x97, 0xEF, 0x44, 0xAA, 0xCC, 0xF6, 0x89, 0xDF, 0xAB, 0x0D, 0x39, 0xF3, 
            0xE7, 0x94, 0xBA, 0xB3, 0xE2, 0xA9, 0x32, 0xCD, 0xDF, 0x13, 0xAB, 0x60, 0xDC, 0xEE, 0x3E, 0xFD, 
            0x18, 0xF3, 0x42, 0x4A, 0xAC, 0x77, 0x60, 0x3F, 0x47, 0x17, 0x6C, 0xB3, 0x57, 0x93, 0x33, 0x1F, 
            0xDD, 0xA1, 0x6E, 0x7E, 0xBD, 0x7A, 0x49, 0x07, 0x30, 0xCC, 0x44, 0x94, 0xDA, 0xC0, 0x59, 0x34, 
            0xB1, 0xFB, 0xCF, 0x8C, 0x10, 0xAE, 0x2F, 0x43, 0x01, 0xD8, 0xF4, 0xCC, 0xCD, 0xAE, 0xA3, 0x15, 
            0x9F, 0xED, 0xE3, 0x42, 0xD1, 0x1F, 0x73, 0x4D, 0x94, 0xA6, 0x76, 0x66, 0xDF, 0x94, 0xB4, 0x27, 
            0xA5, 0xC8, 0x2F, 0x9A, 0x31, 0x0C, 0x04, 0x80, 0x81, 0x89, 0x40, 0xC5, 0xBE, 0x53, 0xCE, 0x39, 
            0xE9, 0x95, 0x7B, 0xE5, 0x35, 0x75, 0xAD, 0x4E, 0x3A, 0x48, 0x76, 0x9A, 0xCC, 0x38, 0xF0, 0x3E, 
            0xCD, 0x62, 0x1B, 0x8E, 0x40, 0x3D, 0x0D, 0xE6, 0x1B, 0xC9, 0xDB, 0x4E, 0x7B, 0xD4, 0x79, 0xF6, 
            0xED, 0x8A, 0xF4, 0xCB, 0x2B, 0x39, 0x55, 0xEE, 0x99, 0x91, 0x91, 0xB3, 0x38, 0x36, 0x5A, 0x35, 
            0x64, 0xE0, 0x61, 0x19, 0xA0, 0x29, 0xBC, 0xFA, 0xA9, 0xC8, 0xF0, 0x09, 0x6E, 0xD6, 0xA3, 0xD0, 
            0xE3, 0x62, 0x19, 0xD2, 0x3C, 0xC1, 0xB7, 0xBC, 0x86, 0x2A, 0x93, 0xD7, 0x9B, 0x64, 0xC1, 0xE6, 
            0x9D, 0x81, 0xA4, 0x1C, 0x76, 0x43, 0x64, 0xEB, 0x13, 0x2A, 0x31, 0x4C, 0xCA, 0xFC, 0xB4, 0x0A, 
            0x75, 0x0C, 0xAD, 0x0F, 0x8D, 0x98, 0xCA, 0x47, 0x21, 0x95, 0x85, 0xEC, 0x9C, 0xE0, 0x24, 0x96, 
            0xD6, 0x7A, 0x4B, 0x44, 0x2C, 0x7C, 0xF7, 0x80, 0x1C, 0xCF, 0xAA, 0x70, 0x6E, 0x22, 0xCE, 0x11, 
            0x2A, 0x17, 0x66, 0x7E, 0x1F, 0x9B, 0x42, 0x22, 0xED, 0x42, 0x70, 0x94, 0x6C, 0x4F, 0x10, 0x9C, 
            0xE4, 0x1D, 0xE3, 0x98, 0x92, 0x19, 0xE7, 0x86, 0x99, 0x4E, 0xE6, 0x03, 0xAF, 0xC3, 0xA5, 0x42, 
            0x0A, 0xFC, 0x8D, 0x41, 0x8E, 0x75, 0xEA, 0xAD, 0x58, 0xE9, 0xA3, 0x78, 0xD9, 0xA8, 0x45, 0x47, 
            0xC8, 0xE3, 0x17, 0x55, 0x3D, 0xBD, 0x4B, 0x04, 0xF9, 0xEF, 0x08, 0xA6, 0x26, 0x08, 0x36, 0x71, 
            0xBC, 0x8D, 0x03, 0xDE, 0xB5, 0xF7, 0x2F, 0x84, 0x21, 0x9C, 0x9C, 0x4E, 0xC9, 0x12, 0x4A, 0x2E
        };
    }
}