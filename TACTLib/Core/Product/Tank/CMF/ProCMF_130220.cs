using static TACTLib.Core.Product.Tank.ManifestCryptoHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF
{
    [ManifestCrypto(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_130220 : ICMFEncryptionProc
    {
        public byte[] Key(CMFHeader header, int length)
        {
            byte[] buffer = new byte[length];
            uint kidx, okidx;
            kidx = okidx = Keytable[header.m_buildVersion & 511];
            for (uint i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += okidx % 61;
            }
            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length)
        {
            byte[] buffer = new byte[length];
            uint kidx, okidx;
            kidx = okidx = (uint)(digest[7] + header.m_dataCount) & 511;
            for (int i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx -= header.m_buildVersion & 511;
                buffer[i] ^= digest[SignedMod(kidx + header.m_buildVersion, SHA1_DIGESTSIZE)];
            }
            return buffer;
        }

        private static readonly byte[] Keytable =
        {
            0xBD, 0xBD, 0xF9, 0x06, 0x09, 0x2A, 0x71, 0xC1, 0x11, 0xE4, 0xAE, 0xF3, 0xB1, 0xD6, 0x9D, 0x7C, 
            0xE7, 0x41, 0x54, 0x14, 0x00, 0x67, 0x19, 0x3C, 0x47, 0xB5, 0xD7, 0x5E, 0x90, 0xC0, 0xAC, 0xE4, 
            0x1A, 0x97, 0x22, 0x69, 0xFC, 0xA3, 0x86, 0x91, 0x4B, 0xEB, 0xF7, 0xF6, 0xBF, 0x2B, 0x3A, 0x9F, 
            0xAB, 0x7A, 0xD5, 0x93, 0xC1, 0x5E, 0xEB, 0xD8, 0x5F, 0xBD, 0xAA, 0x49, 0xEC, 0x60, 0x0F, 0x7F, 
            0xCF, 0x88, 0x2D, 0x0A, 0xC2, 0xF5, 0x27, 0x26, 0x71, 0x25, 0x94, 0x59, 0xC8, 0x67, 0xE2, 0xE7, 
            0x2A, 0xBC, 0x93, 0xB7, 0x3D, 0xED, 0x3A, 0x89, 0xF1, 0x8D, 0x5D, 0x4B, 0x54, 0xB5, 0x0C, 0x87, 
            0x8F, 0xFF, 0x9A, 0x8A, 0x71, 0x16, 0x92, 0xF5, 0x28, 0xD9, 0xB0, 0xE3, 0x50, 0x9D, 0x72, 0x97, 
            0xC9, 0x7B, 0x55, 0xE9, 0xDC, 0xD2, 0xFE, 0xEA, 0xAA, 0x97, 0xA7, 0x61, 0xC6, 0x9C, 0x5E, 0x89, 
            0x6D, 0xA4, 0x13, 0x6F, 0xDE, 0x05, 0x56, 0x46, 0x58, 0x77, 0x64, 0x6B, 0x07, 0x15, 0x97, 0xDD, 
            0x81, 0x6E, 0x5F, 0xCB, 0xBA, 0x65, 0x59, 0xDC, 0x7B, 0xDB, 0xFB, 0xD4, 0x73, 0x1C, 0xFB, 0xD5, 
            0x76, 0x14, 0x12, 0xED, 0x63, 0x12, 0xD2, 0x86, 0x4A, 0x9B, 0x8C, 0xE2, 0xF6, 0x23, 0x26, 0x6B, 
            0x3C, 0xAE, 0xF3, 0xD8, 0xF9, 0xA5, 0x36, 0x19, 0xB9, 0xBB, 0xA8, 0xC5, 0x51, 0x47, 0xA5, 0x00, 
            0x8D, 0x0C, 0x8E, 0x15, 0xA9, 0x62, 0x61, 0xC4, 0x1E, 0x69, 0x06, 0xE5, 0xE4, 0xA6, 0xDD, 0xEC, 
            0x11, 0xE4, 0xF1, 0x1E, 0xF5, 0x25, 0x23, 0xFB, 0xD4, 0x50, 0x57, 0x7D, 0xB3, 0xAE, 0xB9, 0x90, 
            0xD5, 0x5E, 0x27, 0xD5, 0xDE, 0x0E, 0xF8, 0x8B, 0x74, 0xE3, 0x39, 0xB3, 0x83, 0x32, 0x2D, 0x01, 
            0x28, 0xD4, 0x34, 0x5A, 0x9A, 0xE3, 0x15, 0xA6, 0x90, 0xF3, 0xC3, 0x8A, 0x6A, 0xE7, 0x04, 0x57, 
            0xA8, 0x64, 0x7B, 0xBC, 0x0D, 0xC3, 0x9B, 0x95, 0x3F, 0xBE, 0x3B, 0x9A, 0x36, 0x39, 0x3A, 0x2E, 
            0x70, 0x6D, 0xC4, 0x7D, 0x10, 0x4C, 0x12, 0xB6, 0x98, 0x7A, 0x8B, 0xAB, 0x2D, 0xA9, 0x25, 0x77, 
            0x94, 0xDC, 0x87, 0xE6, 0xAB, 0x95, 0xF1, 0x1D, 0xDF, 0x5D, 0xF9, 0x6D, 0x10, 0x02, 0x2F, 0x0A, 
            0x58, 0x09, 0x3E, 0xCD, 0x53, 0x43, 0xC1, 0xBB, 0x8F, 0x8C, 0xCC, 0x03, 0x4F, 0xE5, 0x9F, 0x19, 
            0xEA, 0xAF, 0x5C, 0xFE, 0x9A, 0x3C, 0xF1, 0xFD, 0x00, 0x15, 0xFE, 0x27, 0xBD, 0x08, 0x74, 0x68, 
            0x88, 0xD5, 0x2D, 0xD4, 0x87, 0x6F, 0x5F, 0x4B, 0x9B, 0x99, 0x3C, 0xE1, 0xB5, 0x0D, 0xE0, 0xA3, 
            0x7B, 0x94, 0x3C, 0xB5, 0x57, 0xD5, 0xB3, 0x66, 0x48, 0xCF, 0x3C, 0x20, 0xEB, 0x1E, 0x8A, 0xD6, 
            0x1A, 0xF5, 0x75, 0x8C, 0xDF, 0xEC, 0x56, 0x2F, 0x9D, 0xA9, 0xF4, 0x02, 0x63, 0x0F, 0x7C, 0x63, 
            0xC1, 0x6B, 0x2D, 0xBD, 0x19, 0x0C, 0x99, 0x20, 0xDD, 0x1C, 0xEF, 0xEA, 0x4A, 0x58, 0xB5, 0x0E, 
            0xC8, 0x13, 0x61, 0xA8, 0x1F, 0x6D, 0x36, 0xBA, 0xF5, 0xC4, 0xF6, 0x17, 0xEC, 0x16, 0xE3, 0x24, 
            0xA1, 0x60, 0x28, 0x48, 0x56, 0xE1, 0xE6, 0xE1, 0x58, 0xDF, 0xBD, 0xD8, 0x45, 0xEA, 0x48, 0x3F, 
            0xC8, 0xC5, 0xE3, 0x3D, 0x81, 0xD8, 0xEB, 0x02, 0x47, 0x95, 0xEF, 0x32, 0xBB, 0x99, 0xA0, 0x4D, 
            0x87, 0xD8, 0x7E, 0xD9, 0x8A, 0x4D, 0x0B, 0xE1, 0xE8, 0x80, 0x8B, 0x9F, 0x77, 0x7D, 0xED, 0x5A, 
            0xE3, 0x1E, 0xFE, 0xE8, 0xB7, 0xAB, 0xF9, 0x44, 0x21, 0x18, 0xA1, 0x42, 0x24, 0xBA, 0x24, 0xEC, 
            0x7E, 0x0C, 0x47, 0xBE, 0xA5, 0x9B, 0xAE, 0xF8, 0xB2, 0x52, 0xFF, 0x16, 0x60, 0x89, 0xAB, 0xD3, 
            0xE4, 0x98, 0x48, 0x5B, 0xE0, 0x15, 0x13, 0x10, 0x29, 0xA6, 0xB1, 0x00, 0x3D, 0x6A, 0xBE, 0xF9
        };
    }
}