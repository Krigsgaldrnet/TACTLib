using static TACTLib.Core.Product.Tank.ManifestCryptoHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [ManifestCrypto(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_63778 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];
            uint kidx = header.m_buildVersion * (uint)length;
            for (uint i = 0; i != length; ++i) {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += (uint) header.m_entryCount;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];
            uint kidx = Keytable[SignedMod((2 * digest[13]) - length, 512)];
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += 3;
                buffer[i] ^= digest[SignedMod(kidx - i, SHA1_DIGESTSIZE)];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0xBD, 0x5E, 0x95, 0x73, 0x20, 0x4F, 0x5B, 0xB9, 0xC4, 0xDC, 0x48, 0xCC, 0x51, 0xC2, 0x92, 0x09,
            0xA4, 0xB5, 0x7A, 0x06, 0x89, 0x97, 0xA2, 0x46, 0x40, 0xFE, 0x97, 0x23, 0x10, 0xAE, 0x46, 0xDE,
            0x98, 0x1A, 0x11, 0x88, 0xEE, 0x30, 0xA0, 0x0A, 0x90, 0xCC, 0x99, 0xCA, 0x1C, 0xD9, 0xC6, 0xF5,
            0x1F, 0xA0, 0x01, 0xDB, 0x3A, 0xBF, 0x88, 0x48, 0x66, 0xB5, 0x89, 0x5A, 0x2F, 0x6F, 0xBB, 0xBF,
            0x0E, 0x8E, 0x07, 0x9E, 0x4C, 0xD1, 0x0E, 0x8A, 0x43, 0x0D, 0x80, 0x26, 0x82, 0xA8, 0x56, 0xD6,
            0x76, 0x67, 0x62, 0xA0, 0x0B, 0xBF, 0xC3, 0x81, 0x1A, 0x85, 0xB5, 0xAA, 0x0B, 0x3F, 0x45, 0x79,
            0x97, 0xB0, 0x10, 0x5C, 0xF6, 0x33, 0x20, 0x08, 0xE9, 0x46, 0x54, 0xA6, 0x6A, 0x05, 0x6C, 0x00,
            0x2A, 0x34, 0x60, 0xB3, 0xCC, 0x19, 0xC7, 0xD2, 0x89, 0x87, 0x5C, 0x87, 0xAF, 0x72, 0xC2, 0x7A,
            0x06, 0x84, 0xEB, 0x45, 0x8A, 0x4C, 0x4E, 0x79, 0x2E, 0xE2, 0xD2, 0x40, 0x06, 0x3E, 0x71, 0x79,
            0xC9, 0xEC, 0x50, 0xFD, 0x68, 0x2C, 0xC3, 0xFC, 0x9E, 0xD1, 0xA9, 0x27, 0xD4, 0x22, 0x9B, 0x67,
            0xD9, 0xDF, 0xB3, 0x40, 0x0A, 0xA9, 0xDD, 0xA1, 0xEC, 0x35, 0x35, 0xBC, 0xA9, 0x7D, 0x17, 0x9B,
            0x5D, 0x29, 0xB6, 0x2D, 0xB4, 0x63, 0xE4, 0xF9, 0x54, 0x24, 0x75, 0x4A, 0xB1, 0xA2, 0xB5, 0x0D,
            0xC9, 0xD1, 0x99, 0xD7, 0x05, 0xC7, 0x37, 0xD1, 0x6A, 0x89, 0x07, 0x1E, 0xA3, 0x24, 0x8A, 0x95,
            0x7D, 0xE6, 0x07, 0xCD, 0x7E, 0x43, 0xAF, 0x61, 0x22, 0xC2, 0x56, 0x3A, 0x5A, 0x62, 0x6F, 0x61,
            0xDC, 0x28, 0xA4, 0xDD, 0x72, 0xE1, 0xA6, 0x83, 0x4B, 0x70, 0x4F, 0x0F, 0x03, 0xEF, 0x01, 0x51,
            0xBD, 0xF0, 0x07, 0x08, 0x66, 0x8B, 0x38, 0x1F, 0x32, 0xFF, 0xFA, 0x12, 0x63, 0xD0, 0x95, 0x5B,
            0x1D, 0xA4, 0x33, 0x63, 0x92, 0x4C, 0x26, 0x02, 0x36, 0x6A, 0xFE, 0x2A, 0xCD, 0x8D, 0x7E, 0x63,
            0x87, 0x30, 0xFB, 0x54, 0x69, 0xC0, 0xFB, 0xDE, 0x80, 0x0E, 0xF2, 0x34, 0x79, 0x9A, 0x27, 0x18,
            0xFF, 0x3D, 0xCF, 0x25, 0x59, 0xDA, 0xA1, 0x7A, 0xC0, 0x99, 0xA3, 0x9F, 0x70, 0x28, 0xFD, 0x1A,
            0xCC, 0x9D, 0xA7, 0x9B, 0x43, 0x75, 0x22, 0xDA, 0x30, 0x6C, 0x1B, 0x99, 0x57, 0x11, 0xA8, 0x1B,
            0x5E, 0x4F, 0x89, 0x8B, 0x5B, 0xE9, 0x81, 0xC4, 0xEA, 0x0E, 0x9D, 0xFD, 0x71, 0x3D, 0xE9, 0x25,
            0x30, 0xA8, 0x80, 0x36, 0xAD, 0xF8, 0x16, 0x4C, 0x21, 0xEC, 0x4A, 0xE9, 0x57, 0x36, 0x49, 0x23,
            0x82, 0xEF, 0x86, 0xCA, 0x72, 0x3C, 0x15, 0x9E, 0xF0, 0x74, 0x8E, 0x7D, 0x29, 0x23, 0xE6, 0x0B,
            0xD4, 0x24, 0xDE, 0x85, 0xAE, 0x85, 0xC6, 0x1B, 0x5C, 0xFC, 0xC8, 0x2F, 0x64, 0x36, 0xA4, 0x18,
            0xEF, 0xE8, 0x37, 0x36, 0x84, 0x66, 0xDC, 0x9D, 0xDF, 0x1E, 0xA0, 0x06, 0x18, 0x52, 0xC5, 0xB4,
            0x14, 0x9D, 0xFB, 0x64, 0x64, 0xC2, 0x09, 0x47, 0x68, 0x98, 0xD2, 0xBD, 0xE7, 0x04, 0x5C, 0xA3,
            0x40, 0xE1, 0x24, 0xC9, 0x4A, 0x90, 0x7B, 0x18, 0x71, 0x1B, 0xF9, 0xF9, 0x17, 0x16, 0x7F, 0x9C,
            0xCB, 0xBB, 0x33, 0x1A, 0x96, 0xC9, 0x3E, 0xCF, 0xE7, 0xDB, 0xBF, 0x6C, 0x56, 0x51, 0xAE, 0xF8,
            0x9D, 0x71, 0x38, 0xA3, 0x28, 0x11, 0x94, 0x65, 0xD8, 0xAA, 0xBE, 0x93, 0x9E, 0x38, 0x8F, 0x05,
            0xF3, 0xC8, 0x94, 0x3A, 0xF6, 0xDF, 0x47, 0x4B, 0xD1, 0x89, 0xCE, 0x18, 0x6A, 0x10, 0x58, 0xE8,
            0x62, 0x13, 0x95, 0x42, 0x2C, 0x84, 0x0C, 0xB1, 0xBF, 0x8D, 0x31, 0x10, 0xB5, 0x6C, 0x4D, 0xE8,
            0x10, 0x46, 0x9E, 0xF5, 0x9C, 0x61, 0xE3, 0xB5, 0xD7, 0xAE, 0xAD, 0x1A, 0xF1, 0xC3, 0x81, 0x33
        };
    }
}