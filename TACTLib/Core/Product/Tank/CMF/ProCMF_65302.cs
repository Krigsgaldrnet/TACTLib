using static TACTLib.Core.Product.Tank.ManifestCryptoHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [ManifestCrypto(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_65302 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];
            uint okidx;
            uint kidx = okidx = Keytable[SignedMod(length * Keytable[0], 512)];
            for (uint i = 0; i != length; ++i) {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += (uint) SignedMod(okidx, 61);
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];
            uint okidx;
            uint kidx = okidx = (uint) (digest[7] + (ushort) header.m_dataCount) & 511;
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += (digest[6] & 1) != 0 ? 37 : okidx % 61;
                buffer[i] ^= digest[SignedMod(kidx - i, SHA1_DIGESTSIZE)];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0x2C, 0x5A, 0xE8, 0x5B, 0x7E, 0x8B, 0xA6, 0x90, 0xA1, 0xF8, 0xFF, 0x7A, 0x10, 0x63, 0x2B, 0x07,
            0xFF, 0xBD, 0x36, 0x86, 0x4E, 0x8D, 0x9B, 0x26, 0x40, 0x2B, 0xF8, 0x7E, 0x21, 0x0B, 0xD9, 0x17,
            0xB3, 0x75, 0xCA, 0x6E, 0x96, 0xEC, 0x9E, 0xE5, 0xE8, 0xCC, 0xC1, 0xEA, 0xD6, 0x91, 0x55, 0xD5,
            0x78, 0x40, 0x19, 0x1E, 0x02, 0x5B, 0xF5, 0x75, 0xDB, 0xA1, 0x17, 0x13, 0x13, 0xD0, 0xDA, 0x1F,
            0x7E, 0xE4, 0xFE, 0xDF, 0xB4, 0x59, 0x1A, 0x45, 0xAF, 0x70, 0xF2, 0xC7, 0xA9, 0xC9, 0x73, 0xB0,
            0xBD, 0x49, 0x75, 0xFE, 0x6D, 0x64, 0x29, 0x0E, 0x20, 0x32, 0x0D, 0x5D, 0x30, 0xCD, 0x3F, 0x97,
            0x08, 0x01, 0x1C, 0xB9, 0x3C, 0xFE, 0x89, 0xAB, 0xE8, 0x97, 0x1F, 0x0C, 0xA4, 0xD7, 0xC5, 0x6D,
            0x5E, 0xE6, 0xF8, 0xAA, 0xEB, 0x2B, 0x4E, 0x95, 0x06, 0x51, 0x79, 0x38, 0xD0, 0x53, 0xA9, 0x8F,
            0x75, 0x68, 0x1B, 0x05, 0x02, 0xD3, 0xAE, 0x0D, 0xF6, 0x3E, 0x0A, 0x51, 0x45, 0x5A, 0xE3, 0x12,
            0x13, 0x6A, 0xB2, 0x4C, 0x65, 0x99, 0x69, 0x87, 0xFA, 0x52, 0x37, 0xBC, 0x5B, 0xEF, 0xE9, 0x1C,
            0x30, 0x93, 0xB2, 0x08, 0xF8, 0x04, 0xF4, 0xE1, 0x6C, 0xD9, 0x2D, 0xF0, 0x6B, 0x4F, 0x95, 0x19,
            0xD3, 0x79, 0x1B, 0x67, 0x3A, 0x50, 0x35, 0xC5, 0x6C, 0x91, 0x95, 0x78, 0xA6, 0x03, 0x7E, 0x9B,
            0x2F, 0xC5, 0x3E, 0xE2, 0x48, 0xBA, 0x5B, 0x7F, 0x25, 0x2E, 0xDF, 0x38, 0xDA, 0x3F, 0x15, 0x4F,
            0x20, 0x41, 0x8D, 0xA5, 0xB2, 0xCD, 0x6C, 0x5B, 0x4F, 0xBE, 0x25, 0x0D, 0x9C, 0xA9, 0xEF, 0xA4,
            0x6A, 0x9E, 0x3B, 0x68, 0xE3, 0x33, 0xB1, 0x81, 0xA6, 0xD5, 0x87, 0x47, 0xAB, 0x00, 0xA6, 0x34,
            0x0B, 0xCF, 0x11, 0x5D, 0x54, 0x40, 0xC6, 0xB6, 0x4F, 0x8F, 0x82, 0x61, 0x90, 0x5E, 0x24, 0x18,
            0x11, 0x47, 0x47, 0x34, 0xD4, 0x8E, 0x1A, 0xBE, 0xF1, 0x6F, 0xD2, 0xF8, 0xD7, 0x2F, 0x2D, 0xEA,
            0x4E, 0x41, 0xA6, 0x04, 0x80, 0x78, 0x1D, 0x16, 0x02, 0xD8, 0x25, 0x3A, 0x22, 0xFE, 0x56, 0x11,
            0xB8, 0xF7, 0xF9, 0x8A, 0x81, 0x87, 0x3E, 0x85, 0xEE, 0x94, 0x04, 0x86, 0x57, 0x0B, 0xEC, 0x64,
            0xF2, 0xF6, 0xCC, 0xEA, 0xEF, 0x03, 0x91, 0x4B, 0x09, 0x52, 0x5E, 0xEF, 0x0A, 0xF1, 0x39, 0xB6,
            0x47, 0xCF, 0xCB, 0x8B, 0x99, 0x91, 0x4E, 0xA4, 0x65, 0x5A, 0x8E, 0x6C, 0x81, 0x57, 0x46, 0x2A,
            0x7B, 0x63, 0x6A, 0x94, 0xB6, 0x29, 0x33, 0x2F, 0x21, 0x85, 0xFC, 0xF4, 0x97, 0x3C, 0x22, 0xAF,
            0xD0, 0x01, 0x99, 0xA4, 0x46, 0x2A, 0x1E, 0x00, 0xA6, 0x1D, 0x40, 0x55, 0x68, 0xF2, 0x4D, 0x21,
            0x17, 0x52, 0xEB, 0xFF, 0x39, 0xC7, 0x24, 0x01, 0x45, 0x51, 0x1D, 0x93, 0xD5, 0x82, 0xC6, 0xD5,
            0x30, 0x8A, 0xA6, 0x90, 0x98, 0xBD, 0x94, 0x08, 0x66, 0x80, 0x7D, 0xF3, 0x54, 0x34, 0x19, 0x30,
            0xB8, 0x04, 0xF1, 0x53, 0x5B, 0x79, 0x0D, 0x76, 0x17, 0x83, 0xA3, 0xEE, 0x98, 0x5D, 0x5B, 0xA4,
            0xD6, 0xE1, 0xED, 0x1A, 0x02, 0xCE, 0x07, 0xBF, 0xCB, 0xF8, 0xC3, 0x06, 0x2C, 0x2A, 0xD1, 0x7F,
            0xF0, 0xDB, 0x95, 0x67, 0x6C, 0x2E, 0x34, 0xDF, 0x0D, 0xAF, 0x76, 0xD2, 0xE1, 0xD9, 0xA4, 0x5A,
            0x47, 0xBF, 0xFA, 0xCC, 0xFF, 0x1B, 0x88, 0x5E, 0xA0, 0x63, 0xA9, 0x1B, 0xEA, 0xB4, 0xBB, 0x55,
            0x4C, 0x6B, 0xCE, 0x53, 0xB0, 0xB2, 0xF4, 0x12, 0x82, 0xD6, 0x4B, 0xD1, 0xC9, 0x77, 0x4F, 0x41,
            0x4F, 0xDC, 0xD1, 0x0A, 0x28, 0xF2, 0x68, 0x90, 0xF6, 0xD3, 0xA2, 0x01, 0x7C, 0xB8, 0xF0, 0xA1,
            0x48, 0x9E, 0x64, 0xBB, 0x5E, 0xB7, 0x52, 0xEF, 0xB3, 0xDF, 0x1D, 0xA7, 0x28, 0xFC, 0x82, 0x63
        };
    }
}
