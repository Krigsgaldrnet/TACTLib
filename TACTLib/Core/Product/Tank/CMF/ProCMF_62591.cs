using static TACTLib.Core.Product.Tank.ManifestCryptoHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [ManifestCrypto(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_62591 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];
            uint kidx = Keytable[(uint) header.m_dataCount & 511];
            for (uint i = 0; i != length; ++i) {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += (uint) (header.m_buildVersion * header.m_dataCount) % 7;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];
            uint kidx = Keytable[(digest[7] * Keytable[0]) & 511];
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += (uint) header.m_entryCount + digest[SignedMod(header.m_entryCount, SHA1_DIGESTSIZE)];
                buffer[i] = digest[SignedMod(kidx, SHA1_DIGESTSIZE)];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0x60, 0x50, 0x91, 0xB6, 0x7D, 0xB3, 0xFD, 0xD7, 0x7F, 0x8D, 0xD9, 0x4A, 0x20, 0xA7, 0x10, 0x12,
            0xEA, 0x76, 0x65, 0x99, 0x97, 0xA1, 0xDB, 0x7C, 0x3F, 0xA8, 0xCC, 0x2D, 0x27, 0xEF, 0x83, 0x87,
            0x8F, 0xC3, 0x39, 0x66, 0x79, 0x8A, 0x6B, 0xEE, 0x3B, 0xDB, 0x66, 0xB6, 0x24, 0x3E, 0x4F, 0xE9,
            0x91, 0x58, 0xAB, 0xD3, 0xB4, 0x4A, 0xD6, 0x47, 0x2F, 0x72, 0xB9, 0xC9, 0x8C, 0x24, 0xF9, 0x27,
            0xA8, 0xBE, 0x10, 0x6F, 0x79, 0x3C, 0xBF, 0xF9, 0x4C, 0xCF, 0xD6, 0xE8, 0xFC, 0x19, 0x68, 0x1E,
            0x31, 0x4E, 0x47, 0xF2, 0x82, 0x6A, 0x4A, 0x58, 0xAB, 0x5D, 0x40, 0xE4, 0xA5, 0xA4, 0x61, 0x29,
            0x1B, 0xD5, 0x83, 0x09, 0x46, 0x76, 0xBE, 0x0C, 0xD6, 0xB6, 0x74, 0x4B, 0x90, 0x96, 0x0A, 0x46,
            0x2F, 0x50, 0xA9, 0xA4, 0x1C, 0x22, 0xD6, 0xA5, 0xE4, 0x88, 0x14, 0x6D, 0xAC, 0x95, 0xB1, 0xDB,
            0x9A, 0x70, 0x71, 0x0E, 0x4F, 0x44, 0x80, 0x74, 0x8E, 0x9C, 0x32, 0xA8, 0xA3, 0x88, 0x9F, 0xF3,
            0x2F, 0x4F, 0x78, 0xE7, 0x5B, 0x16, 0x1B, 0x72, 0xF8, 0xC5, 0xC8, 0xAB, 0x24, 0x7F, 0xBA, 0xA5,
            0xBC, 0xDE, 0x57, 0x9B, 0xE5, 0xA1, 0x48, 0x4E, 0xF1, 0xB5, 0x3A, 0x5B, 0xAE, 0x15, 0xE1, 0xF9,
            0x58, 0xBA, 0x90, 0x0F, 0xB9, 0x59, 0x4D, 0x14, 0x52, 0xCF, 0x1E, 0xDE, 0x6A, 0xD9, 0x0B, 0xB5,
            0xE1, 0x48, 0xD3, 0x77, 0x6F, 0xAF, 0x8B, 0x89, 0x08, 0xC8, 0xEE, 0x6E, 0xBC, 0xD3, 0x15, 0xD9,
            0x5F, 0x56, 0x3A, 0x68, 0xCF, 0x12, 0xE1, 0xE0, 0x35, 0x53, 0xDD, 0x77, 0xCE, 0x51, 0x65, 0x64,
            0x9E, 0x62, 0x05, 0x13, 0xC1, 0xFE, 0x0A, 0x3F, 0xF1, 0x4C, 0xDE, 0xE5, 0x63, 0x50, 0x31, 0x03,
            0x4F, 0x74, 0xCC, 0xFA, 0xE9, 0x4C, 0xE5, 0x91, 0xA5, 0x00, 0xFF, 0x3D, 0x82, 0x6A, 0xE0, 0x0D,
            0x4A, 0x5E, 0xC0, 0xD9, 0x66, 0x76, 0x6F, 0x3B, 0x6A, 0x61, 0xB0, 0x77, 0xAF, 0xC8, 0x52, 0xD3,
            0x2B, 0x50, 0xA0, 0x28, 0x4D, 0xA1, 0xD6, 0xB7, 0x6B, 0x31, 0x4D, 0x30, 0x8F, 0x79, 0xBE, 0xC1,
            0x4E, 0x99, 0xF5, 0xE5, 0x2C, 0x26, 0xAE, 0x0D, 0x53, 0x84, 0xA0, 0x1C, 0xFD, 0x68, 0x8D, 0x5F,
            0x05, 0x1C, 0xCE, 0x47, 0xCC, 0x45, 0x26, 0xF2, 0x5A, 0xBA, 0xC5, 0x18, 0x92, 0xB9, 0xA5, 0x5B,
            0x2F, 0xA6, 0xB3, 0x39, 0x02, 0x76, 0xF9, 0x3E, 0xEE, 0xD8, 0xD7, 0x07, 0xA4, 0x45, 0x9A, 0x91,
            0x1F, 0xF6, 0xF6, 0xD2, 0x19, 0xCA, 0x38, 0x35, 0x63, 0xA6, 0x1D, 0x55, 0xC2, 0x4E, 0xFB, 0xB3,
            0x8C, 0x74, 0x70, 0x24, 0x58, 0xE5, 0x2A, 0xCB, 0x0D, 0xA4, 0x71, 0x05, 0x79, 0xC7, 0x65, 0xD9,
            0x3E, 0xDC, 0x9A, 0x6C, 0x5D, 0x53, 0xD3, 0x3D, 0xE7, 0x4E, 0xEE, 0x8B, 0x0B, 0xFD, 0x8D, 0x2D,
            0x8E, 0xFA, 0xCB, 0xDB, 0xBB, 0x9B, 0x7C, 0xCD, 0x09, 0x56, 0x61, 0xB4, 0xCA, 0x15, 0x78, 0x4A,
            0x88, 0xB6, 0xF2, 0x27, 0x29, 0x0F, 0x94, 0xA8, 0x70, 0x65, 0x42, 0x7C, 0x28, 0xCA, 0xEC, 0xBC,
            0xCF, 0xAE, 0xA8, 0xF6, 0xEA, 0x6D, 0xAB, 0x37, 0x8A, 0x1B, 0x91, 0x81, 0x90, 0x8D, 0x1C, 0x17,
            0x91, 0x75, 0xC4, 0xA4, 0xB2, 0xE9, 0x90, 0x32, 0xF3, 0x30, 0x9B, 0x59, 0x91, 0x94, 0xBC, 0xB2,
            0xFC, 0x5B, 0x56, 0xC7, 0x69, 0xA9, 0xA2, 0xE2, 0x2D, 0x45, 0x6F, 0x23, 0x4B, 0x09, 0x78, 0xC6,
            0xE4, 0xF3, 0x63, 0xFB, 0x8F, 0x38, 0xF3, 0xF3, 0x1B, 0x5E, 0x95, 0x3A, 0xD5, 0x2F, 0x6A, 0x17,
            0x9E, 0x25, 0x71, 0x46, 0x86, 0x89, 0x7E, 0x8D, 0xC3, 0x30, 0xAC, 0xBD, 0x74, 0x29, 0xB0, 0x5E,
            0x83, 0xD6, 0xEE, 0x0C, 0x75, 0xCF, 0xCD, 0x64, 0x95, 0xE4, 0xEE, 0x88, 0xAD, 0x1A, 0xE0, 0xBD
        };
    }
}
