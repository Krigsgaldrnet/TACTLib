using static TACTLib.Core.Product.Tank.ManifestCryptoHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF
{
    [ManifestCrypto(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_57979 : ICMFEncryptionProc
    {
        public byte[] Key(CMFHeader header, int length)
        {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[length + 256];
            for (int i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                switch (SignedMod(kidx, 3))
                {
                case 0:
                    kidx += 103;
                    break;
                case 1:
                    kidx = 4 * kidx % header.m_buildVersion;
                    break;
                case 2:
                    --kidx;
                    break;
                }
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length)
        {
            byte[] buffer = new byte[length];

            uint kidx = 2u * digest[5];
            for (int i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += (uint)header.m_entryCount + digest[header.m_entryCount % SHA1_DIGESTSIZE];
                buffer[i] ^= digest[(header.m_buildVersion + i) % SHA1_DIGESTSIZE];
            }

            return buffer;
        }

        private static readonly byte[] Keytable =
        {
            0x5A, 0x6B, 0x24, 0xD1, 0x29, 0x31, 0xDB, 0x8A, 0x9E, 0x4E, 0xE7, 0x85, 0xA2, 0x09, 0x77, 0x34,
            0x21, 0x73, 0x90, 0x52, 0xCB, 0x25, 0xB3, 0xA0, 0xC9, 0x79, 0xA6, 0xEB, 0x6F, 0x5A, 0x62, 0x62,
            0x48, 0x37, 0x1C, 0x3C, 0x2E, 0x8B, 0xD6, 0xB0, 0xCC, 0x06, 0xF2, 0x64, 0xF7, 0xD6, 0x01, 0x91,
            0x10, 0x55, 0xAB, 0xBA, 0x88, 0x74, 0x2C, 0x00, 0xE9, 0x14, 0x39, 0x85, 0xD2, 0x2C, 0x53, 0x8C,
            0x69, 0x66, 0x9A, 0xE0, 0x88, 0x21, 0xAD, 0x70, 0xF7, 0xD9, 0x46, 0xA3, 0xEE, 0x81, 0x37, 0x2C,
            0x55, 0x27, 0x3A, 0x26, 0xF2, 0xEA, 0x36, 0xF0, 0xA6, 0x9C, 0xEC, 0x66, 0x7D, 0x47, 0xD3, 0xE9,
            0xE6, 0xFB, 0x00, 0xB7, 0x93, 0xCA, 0xC3, 0xA4, 0x0C, 0x02, 0x1C, 0x48, 0xE1, 0x78, 0x09, 0xF8,
            0xC8, 0x26, 0x68, 0xE9, 0xAC, 0x54, 0xF6, 0xA4, 0x74, 0x7B, 0x21, 0xFE, 0x00, 0xDC, 0x5E, 0x5B,
            0x12, 0x66, 0xCD, 0xB7, 0xCF, 0x2F, 0xBA, 0x51, 0x89, 0x62, 0xF5, 0x0F, 0x40, 0xD4, 0x18, 0x2B,
            0xA3, 0x60, 0xE0, 0x86, 0x1D, 0xDE, 0x72, 0x21, 0xD1, 0xC5, 0x11, 0xFE, 0xBA, 0x81, 0x22, 0x4D,
            0x73, 0x21, 0x03, 0x0D, 0x4C, 0x8F, 0xD6, 0xFE, 0x80, 0x39, 0xFE, 0x7B, 0x97, 0x63, 0x6B, 0xA2,
            0x15, 0x0F, 0xE0, 0xE2, 0xE4, 0x5C, 0xF0, 0x4D, 0xB8, 0x74, 0x32, 0xD2, 0x52, 0x3B, 0x40, 0x7D,
            0x64, 0x37, 0xE7, 0xCF, 0xAA, 0x04, 0x34, 0xA8, 0x50, 0xCE, 0x5F, 0x98, 0x62, 0x1D, 0x29, 0x48,
            0x57, 0x4E, 0x94, 0x26, 0x8E, 0x05, 0xE1, 0x1E, 0x37, 0x27, 0x46, 0xA8, 0x55, 0x13, 0x86, 0x45,
            0xD9, 0xEB, 0xC3, 0xED, 0x42, 0xCB, 0xF1, 0xE0, 0x70, 0x83, 0x97, 0x5B, 0xEA, 0x35, 0x12, 0x19,
            0x45, 0x82, 0xA3, 0x8C, 0x42, 0x26, 0x17, 0x34, 0x21, 0x2B, 0x6A, 0xAD, 0x64, 0x74, 0x69, 0xFF,
            0x57, 0x55, 0xD3, 0x80, 0x75, 0xA8, 0x99, 0xE3, 0xC8, 0x4F, 0xE4, 0x80, 0xA8, 0xB0, 0x3A, 0x91,
            0x69, 0x63, 0xA0, 0xFC, 0x73, 0xF5, 0xB2, 0xEB, 0xA3, 0x46, 0x8E, 0x34, 0x54, 0xB4, 0x87, 0x54,
            0x20, 0x06, 0xDE, 0xEF, 0x2A, 0x27, 0xB8, 0x6A, 0x18, 0x60, 0x29, 0x55, 0xE4, 0x5C, 0x04, 0x4B,
            0x4B, 0x72, 0x50, 0xE7, 0x21, 0x46, 0x47, 0x18, 0x24, 0xF0, 0xAD, 0x76, 0xB5, 0x14, 0xB9, 0x74,
            0x9F, 0x52, 0x9A, 0x0A, 0x36, 0xC0, 0x54, 0x5E, 0xA2, 0x68, 0x89, 0xD7, 0xF5, 0xD0, 0xBB, 0x44,
            0xFE, 0xD6, 0xF0, 0x71, 0xEE, 0x10, 0x09, 0x52, 0x09, 0x89, 0x90, 0x06, 0x17, 0x74, 0xB4, 0x27,
            0x10, 0x27, 0x17, 0x95, 0x72, 0x24, 0xCA, 0xA7, 0xFE, 0x15, 0xAD, 0x46, 0x37, 0xB9, 0xFC, 0x77,
            0x07, 0x3F, 0xAF, 0x71, 0x8F, 0x67, 0x43, 0x7F, 0xF8, 0xE2, 0x8B, 0x33, 0xBE, 0x49, 0xE2, 0x38,
            0x51, 0x96, 0x36, 0xAE, 0x86, 0x63, 0x30, 0x55, 0x5A, 0x21, 0x12, 0x6D, 0x0B, 0x0D, 0xAA, 0xB3,
            0xF2, 0x94, 0x95, 0x22, 0x50, 0x8F, 0xED, 0x06, 0x33, 0x6B, 0x3C, 0x78, 0x93, 0x8B, 0xE4, 0x35,
            0x3A, 0x4F, 0x99, 0xC7, 0xA1, 0xF6, 0x02, 0xE9, 0xBA, 0xC5, 0x6E, 0x66, 0x24, 0xD2, 0xB1, 0xF6,
            0x96, 0xEA, 0x87, 0x6D, 0x65, 0x3A, 0x2A, 0x89, 0xD1, 0xC1, 0xAF, 0x6F, 0xE3, 0xBD, 0xAE, 0xF0,
            0xAF, 0xB9, 0x25, 0x4C, 0x13, 0x15, 0xBE, 0x68, 0xB5, 0x19, 0x99, 0x07, 0x72, 0x7A, 0xBB, 0x2D,
            0xB6, 0xFC, 0xBC, 0xE6, 0xB2, 0xAA, 0x6C, 0xEA, 0x50, 0xCB, 0x2C, 0x9C, 0x99, 0xFE, 0xD9, 0x53,
            0xF0, 0x2F, 0x81, 0x92, 0x59, 0x15, 0xBE, 0x0B, 0x05, 0xF0, 0x13, 0x4A, 0x5F, 0x12, 0x2E, 0x6A,
            0xBC, 0xF8, 0x92, 0x1A, 0x41, 0xAB, 0xFB, 0x3F, 0x31, 0x37, 0x1B, 0x31, 0xCF, 0x73, 0x35, 0x23
        };
    }
}