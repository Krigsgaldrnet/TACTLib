using static TACTLib.Core.Product.Tank.ManifestCryptoHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF
{
    [ManifestCrypto(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_121872 : ICMFEncryptionProc
    {
        public byte[] Key(CMFHeader header, int length)
        {
            byte[] buffer = new byte[length];
            uint kidx, okidx;
            kidx = okidx = Keytable[(length * Keytable[0]) & 511];
            for (uint i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx -= header.m_buildVersion & 511;
            }
            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length)
        {
            byte[] buffer = new byte[length];
            uint kidx, okidx;
            kidx = okidx = Keytable[header.m_dataCount & 511];
            for (int i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx = header.m_buildVersion - kidx;
                buffer[i] ^= digest[SignedMod(kidx + i, SHA1_DIGESTSIZE)];
            }
            return buffer;
        }

        private static readonly byte[] Keytable =
        {
            0x8E, 0x6D, 0x98, 0xE5, 0xF5, 0x6D, 0x84, 0x1A, 0xD2, 0x4A, 0xF1, 0x44, 0x28, 0xBC, 0x3D, 0x3D, 
            0x8D, 0x67, 0x73, 0xF7, 0x45, 0xCA, 0xE3, 0x91, 0x53, 0x8D, 0xFF, 0xFB, 0x2F, 0x06, 0xC6, 0x0B, 
            0x80, 0x24, 0x13, 0x92, 0x07, 0xF8, 0x16, 0xD8, 0x49, 0x21, 0xE8, 0x58, 0xE6, 0x9C, 0xAD, 0xB6, 
            0x5D, 0x78, 0x1B, 0xD4, 0x56, 0xBD, 0x0A, 0xDA, 0xF0, 0x7B, 0x63, 0xF9, 0x63, 0xE5, 0xA2, 0x7F, 
            0x54, 0x1B, 0x46, 0x9E, 0x8F, 0x90, 0x52, 0x4B, 0x0E, 0xB7, 0x44, 0xFA, 0x00, 0xAE, 0x0C, 0xAB, 
            0x41, 0x36, 0x8A, 0xD7, 0x51, 0xAE, 0x78, 0xB9, 0xB6, 0x55, 0x79, 0x6A, 0x99, 0x09, 0x3F, 0xD2, 
            0x5A, 0xAC, 0x5A, 0x32, 0xE8, 0x64, 0x6D, 0xB5, 0xC0, 0xE5, 0x9A, 0x82, 0x9A, 0x1A, 0x21, 0xD9, 
            0x5A, 0xA4, 0x09, 0x13, 0x9B, 0x9E, 0x11, 0x60, 0xAF, 0x09, 0xF8, 0xDF, 0xCC, 0x9A, 0x58, 0xCE, 
            0x0B, 0xD1, 0x45, 0x88, 0x7D, 0x6B, 0x19, 0xED, 0xEC, 0xCB, 0xA0, 0x0B, 0x7A, 0xFA, 0xE1, 0x23, 
            0x57, 0x14, 0xCB, 0x07, 0xDF, 0x4D, 0x56, 0xD4, 0xD8, 0x19, 0xEF, 0x95, 0xB4, 0x12, 0x8A, 0xA4, 
            0x38, 0xD3, 0x91, 0xAA, 0xF0, 0x41, 0x86, 0x64, 0x35, 0xD1, 0x55, 0x18, 0xC7, 0x15, 0x8F, 0xAC, 
            0x8C, 0xCB, 0x66, 0x18, 0x03, 0xD5, 0x56, 0x61, 0xCB, 0xF5, 0xA1, 0x02, 0x7D, 0x1D, 0x81, 0x65, 
            0xFD, 0x63, 0xB7, 0x51, 0x26, 0x7D, 0x2E, 0x43, 0x73, 0x22, 0x6C, 0xE3, 0xD5, 0x49, 0x18, 0xB2, 
            0x83, 0xB2, 0xE3, 0xF0, 0x42, 0x2F, 0xBE, 0xAA, 0x31, 0x76, 0x1E, 0x76, 0x3F, 0x15, 0xA8, 0xF9, 
            0x8C, 0x91, 0x8B, 0xF5, 0x3A, 0x75, 0x97, 0xF9, 0x11, 0x4D, 0x00, 0xAB, 0x37, 0xD1, 0x5C, 0xEB, 
            0xD6, 0x37, 0xF4, 0x45, 0x17, 0x40, 0xF1, 0x1B, 0x7C, 0x90, 0xC4, 0x61, 0xAD, 0x2B, 0x1D, 0x56, 
            0x06, 0xDE, 0x37, 0x0B, 0x8A, 0xB4, 0xC2, 0x76, 0x89, 0x2B, 0x64, 0xC4, 0xAB, 0xE5, 0x71, 0xB8, 
            0xEF, 0xCD, 0x40, 0xF3, 0x7D, 0x79, 0xFA, 0xB2, 0xEC, 0x10, 0x3A, 0x6E, 0x32, 0x43, 0x43, 0x63, 
            0xD0, 0x82, 0x48, 0x30, 0x32, 0xCF, 0xF3, 0x50, 0xDB, 0x6C, 0x18, 0x2F, 0xE5, 0x89, 0x72, 0xEF, 
            0xDC, 0xC7, 0x79, 0x62, 0xB4, 0xA8, 0x29, 0x48, 0xBD, 0x71, 0x9C, 0xBF, 0x26, 0xCC, 0xA0, 0x5E, 
            0xFD, 0xF4, 0x78, 0xE4, 0x9F, 0xF0, 0x71, 0x87, 0x1E, 0xE0, 0x5E, 0x91, 0xD8, 0x30, 0xA2, 0x26, 
            0x32, 0x84, 0x16, 0xCC, 0xE7, 0x8F, 0xF0, 0x59, 0x68, 0xFF, 0x13, 0x14, 0x92, 0x62, 0x78, 0xCD, 
            0xFE, 0x48, 0x6A, 0xF7, 0x8C, 0xF9, 0x59, 0xDB, 0xF3, 0x94, 0x5B, 0x44, 0x45, 0x08, 0x4E, 0xD6, 
            0x06, 0x9E, 0x08, 0xED, 0x51, 0x9F, 0x9B, 0x03, 0xBE, 0x83, 0xBE, 0xDB, 0xC7, 0xE7, 0xB7, 0x2A, 
            0x86, 0xF1, 0x27, 0x09, 0xEE, 0x6D, 0x92, 0x07, 0xC7, 0xE0, 0x11, 0xEF, 0x35, 0x33, 0x54, 0x14, 
            0x79, 0x56, 0x6F, 0xE2, 0x1C, 0x16, 0xF6, 0x76, 0xA4, 0xFE, 0xE4, 0x30, 0x04, 0x55, 0x35, 0xFE, 
            0x6D, 0xDA, 0x9A, 0x5B, 0xA2, 0x19, 0xE5, 0x95, 0x3B, 0x3F, 0xDA, 0xB5, 0x67, 0xCB, 0x6E, 0xDC, 
            0x88, 0xA0, 0xC8, 0x3B, 0x57, 0xC7, 0x10, 0xB8, 0x15, 0x44, 0x76, 0xF7, 0x1E, 0x5B, 0x1D, 0x98, 
            0xF7, 0x97, 0xDF, 0x2D, 0xBB, 0x86, 0x5B, 0xDD, 0x6E, 0x04, 0x77, 0xF6, 0x2E, 0x9D, 0xD0, 0x0D, 
            0x0D, 0x2E, 0xEC, 0xAB, 0x24, 0xCF, 0xF0, 0xC9, 0x8F, 0x14, 0x70, 0xFD, 0x21, 0x1F, 0x73, 0xF8, 
            0xA9, 0x2A, 0x7A, 0x2E, 0x0B, 0x1D, 0x60, 0x45, 0x27, 0xC7, 0xC0, 0x31, 0x86, 0xEA, 0xB6, 0x89, 
            0x6A, 0xC3, 0x66, 0x4A, 0x98, 0x79, 0x29, 0xDD, 0xC2, 0xCF, 0x3D, 0x17, 0x4B, 0xC8, 0xAE, 0xC8
        };
    }
}