using static TACTLib.Core.Product.Tank.ManifestCryptoHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF
{
    [ManifestCrypto(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_57230 : ICMFEncryptionProc
    {
        public byte[] Key(CMFHeader header, int length)
        {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[398];
            for (int i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                switch (SignedMod(kidx, 3))
                {
                case 0:
                    kidx += 103;
                    break;
                case 1:
                    kidx = (uint)SignedMod(4 * kidx, header.m_buildVersion);
                    break;
                case 2:
                    --kidx;
                    break;
                }
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length)
        {
            byte[] buffer = new byte[length];

            int kidx = 2 * digest[5];
            int increment = 2 * digest[5] % 29;
            for (int i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += increment;
                buffer[i] ^= (byte)(digest[SignedMod(kidx + header.m_entryCount, SHA1_DIGESTSIZE)] + 1);
            }

            return buffer;
        }

        private static readonly byte[] Keytable =
        {
            0xA9, 0x43, 0xDB, 0x83, 0x4E, 0x2C, 0x99, 0xFB, 0x35, 0x7B, 0x3E, 0xFB, 0xE2, 0x00, 0xB7, 0xBC,
            0x66, 0x3D, 0x5B, 0x4D, 0x8D, 0x30, 0x1B, 0x37, 0x26, 0x8B, 0x85, 0xD8, 0xD9, 0x98, 0x88, 0xC1,
            0x1F, 0xC5, 0xFD, 0xA8, 0x0B, 0xFA, 0xCD, 0x94, 0x0C, 0x8C, 0x79, 0x86, 0x1C, 0xB2, 0xB4, 0x41,
            0xF9, 0x3F, 0x87, 0xC5, 0xCB, 0x4F, 0xCF, 0x11, 0x40, 0x82, 0xD1, 0xF5, 0x0B, 0x93, 0x44, 0x7B,
            0x99, 0xB9, 0x38, 0x40, 0x5B, 0x05, 0xAE, 0xBA, 0xC9, 0x62, 0x4C, 0x76, 0x66, 0x09, 0x69, 0x6C,
            0xD3, 0x19, 0x93, 0x08, 0x3F, 0xAB, 0x00, 0xF0, 0xCE, 0xE8, 0xE1, 0x90, 0xB1, 0x4F, 0x1E, 0xF6,
            0xD6, 0x2D, 0x8B, 0xF4, 0xD9, 0xDE, 0xCD, 0x2A, 0x00, 0x6A, 0xD6, 0x01, 0x96, 0x7E, 0xC5, 0xE1,
            0xE6, 0x53, 0xBB, 0x43, 0x38, 0x0F, 0x34, 0xA2, 0x9F, 0x6E, 0x53, 0xC0, 0xDE, 0x50, 0x22, 0x0B,
            0x0F, 0x63, 0xAF, 0x19, 0xA0, 0xB2, 0xA7, 0x16, 0xF6, 0x1C, 0x29, 0x52, 0x7B, 0x38, 0x2C, 0xEC,
            0x2A, 0x54, 0xC6, 0xA1, 0xA9, 0x87, 0x4F, 0xD7, 0x04, 0x5A, 0x99, 0xF9, 0x39, 0x29, 0x6D, 0xA8,
            0xA2, 0x86, 0x17, 0xBE, 0x41, 0x23, 0xA3, 0x76, 0x11, 0xAF, 0xF9, 0x85, 0x6F, 0x6A, 0x75, 0x43,
            0xEF, 0x77, 0x43, 0x2C, 0x1A, 0x31, 0x80, 0xF2, 0xF8, 0xF6, 0x26, 0x3D, 0xCF, 0xB0, 0x63, 0x8D,
            0xB7, 0xFB, 0xDD, 0x1B, 0x54, 0x5B, 0x7A, 0x4A, 0x46, 0xDD, 0xD0, 0x51, 0x42, 0xE1, 0xE8, 0x4D,
            0xA8, 0xF6, 0xC2, 0x21, 0xED, 0x9B, 0x0A, 0x8D, 0x9C, 0xF8, 0xFB, 0x07, 0x55, 0x00, 0x21, 0x1A,
            0x12, 0x8A, 0xF1, 0x0A, 0x3A, 0x1A, 0x5A, 0xB4, 0x25, 0x87, 0x18, 0x76, 0x52, 0x05, 0x94, 0x1D,
            0x26, 0x08, 0x9C, 0x1C, 0x72, 0x73, 0x19, 0x52, 0x96, 0xCF, 0x38, 0xCA, 0xFB, 0xCA, 0x0A, 0x73,
            0x36, 0x3D, 0xE3, 0x4F, 0x82, 0x19, 0xDD, 0xB6, 0x24, 0x75, 0x75, 0xD4, 0x48, 0xB1, 0x53, 0x56,
            0x89, 0xCE, 0xE9, 0xC9, 0xA0, 0xE5, 0x58, 0x77, 0x19, 0xA9, 0x64, 0xFC, 0x27, 0x05, 0x5D, 0x14,
            0x5D, 0xC0, 0xB8, 0x59, 0xB4, 0x42, 0x65, 0x18, 0x7E, 0x0F, 0x0E, 0x09, 0x0A, 0x9A, 0x9B, 0xAE,
            0x67, 0xF5, 0x9B, 0x6C, 0xE7, 0xB7, 0xE8, 0x35, 0x3A, 0x99, 0xF6, 0xF8, 0x28, 0x19, 0x01, 0x71,
            0x48, 0x0D, 0x0E, 0x6E, 0xBE, 0x8D, 0x81, 0xBE, 0x8E, 0x87, 0xCC, 0xFC, 0x25, 0xD8, 0xFC, 0xB2,
            0xB8, 0x44, 0x21, 0xA3, 0x62, 0xEF, 0x0C, 0x65, 0x2B, 0xF6, 0x66, 0x48, 0x1F, 0x9E, 0xD6, 0x36,
            0x3E, 0xC9, 0xA1, 0xFE, 0x12, 0x32, 0x7C, 0x7C, 0x47, 0x3F, 0xD8, 0x8A, 0xE8, 0x70, 0x43, 0x72,
            0x2B, 0x1C, 0x56, 0xFF, 0xA2, 0x62, 0xE5, 0xBB, 0xB3, 0x16, 0xDF, 0x8A, 0x11, 0x26, 0xD7, 0xE8,
            0x03, 0x6C, 0xDB, 0x49, 0x9E, 0x0F, 0xC2, 0x16, 0xA9, 0x66, 0x28, 0x61, 0x74, 0xAA, 0x50, 0x69,
            0x04, 0xF4, 0xF9, 0xD0, 0xAA, 0xC4, 0x9A, 0xC1, 0x95, 0x90, 0x8D, 0x69, 0x07, 0x34, 0x00, 0xB7,
            0xE1, 0x05, 0xCE, 0x5F, 0x5F, 0x3A, 0x75, 0xB0, 0x3D, 0x21, 0xBD, 0x63, 0x58, 0xFE, 0x16, 0x4A,
            0x34, 0xA4, 0x98, 0xEC, 0x5E, 0x3E, 0xE8, 0x96, 0xCE, 0xDE, 0x7C, 0x3E, 0xE9, 0x3E, 0xF4, 0x9C,
            0x70, 0x4C, 0x2B, 0x91, 0x40, 0xC2, 0x10, 0xD9, 0xE1, 0xE7, 0x83, 0x0D, 0xCD, 0x33, 0x40, 0x60,
            0x29, 0xD5, 0x96, 0x34, 0xAA, 0x84, 0x30, 0xC7, 0x48, 0x56, 0x5D, 0x1B, 0xC3, 0xE7, 0xE6, 0x87,
            0x17, 0xAF, 0xCF, 0xBF, 0x3C, 0x63, 0xA5, 0x43, 0x0F, 0x1A, 0x95, 0x49, 0x24, 0x8E, 0xC2, 0xF6,
            0x4A, 0xE1, 0x73, 0xD8, 0xBE, 0xE5, 0x94, 0x89, 0xB4, 0xA9, 0x09, 0xCF, 0x57, 0x91, 0xD2, 0x8D
        };
    }
}