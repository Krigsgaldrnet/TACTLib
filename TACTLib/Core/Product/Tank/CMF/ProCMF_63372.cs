using static TACTLib.Core.Product.Tank.ManifestCryptoHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [ManifestCrypto(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_63372 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];
            uint kidx = Keytable[SignedMod(length * Keytable[0], 512)];
            for (uint i = 0; i != length; ++i) {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += (uint) header.m_entryCount;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];
            uint kidx = Keytable[SignedMod((2 * digest[13]) - length, 512)];
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += (uint) header.m_entryCount + digest[SignedMod(header.m_entryCount, SHA1_DIGESTSIZE)];
                buffer[i] = digest[SignedMod(kidx, SHA1_DIGESTSIZE)];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0xDA, 0x66, 0x51, 0x4E, 0x68, 0xA5, 0xDB, 0xE9, 0xF1, 0xC6, 0x54, 0xA0, 0x6A, 0x28, 0x00, 0x72,
            0xAB, 0x78, 0x7E, 0xDF, 0xF2, 0x0D, 0xE3, 0x09, 0xD8, 0x28, 0xC6, 0x8B, 0x85, 0x39, 0x76, 0xBF,
            0xF1, 0xBC, 0x14, 0xFD, 0x74, 0x73, 0x40, 0xFA, 0xDA, 0x15, 0x50, 0x01, 0xF4, 0x9E, 0x83, 0x6D,
            0xCA, 0x0A, 0xD8, 0xDC, 0xD9, 0xED, 0xF4, 0x01, 0x6F, 0x1F, 0x41, 0x8E, 0xA9, 0x2C, 0xD4, 0x2F,
            0xC3, 0x8F, 0xFB, 0xF0, 0xAD, 0x85, 0xE8, 0x0A, 0xF7, 0x73, 0x22, 0x00, 0xC7, 0x87, 0x90, 0x5D,
            0x86, 0xCA, 0x4C, 0x2E, 0xC4, 0x0D, 0x7F, 0x4F, 0xD4, 0x5F, 0x9E, 0xC6, 0x17, 0xE4, 0xEE, 0x53,
            0x20, 0x86, 0x62, 0x67, 0xA3, 0x1B, 0x8C, 0xB6, 0x83, 0x48, 0xC3, 0x0E, 0xF5, 0x3E, 0xFD, 0x4A,
            0x4D, 0x30, 0x52, 0x03, 0xA3, 0x3F, 0x2A, 0xE4, 0x9B, 0xDD, 0xD5, 0x7E, 0xC1, 0x46, 0xAC, 0x1A,
            0x49, 0x72, 0x6F, 0x9B, 0xE5, 0x98, 0xF5, 0x10, 0x8E, 0x3F, 0x73, 0xC4, 0x26, 0xC3, 0x60, 0x36,
            0xAF, 0x1C, 0x15, 0x8D, 0x3A, 0xB2, 0xAB, 0xCE, 0xEB, 0xA0, 0x71, 0x25, 0xFB, 0xC0, 0xB4, 0xDD,
            0x18, 0x11, 0x1B, 0xF2, 0x5D, 0xD1, 0x20, 0xFA, 0xE8, 0x7B, 0xEC, 0x18, 0xBD, 0xEF, 0x2C, 0x71,
            0xFB, 0xC3, 0xFE, 0xFD, 0xA5, 0x43, 0xAA, 0x72, 0xA4, 0x98, 0xF1, 0x61, 0xD8, 0x9B, 0x82, 0x8B,
            0x60, 0x99, 0xD0, 0x70, 0x81, 0xDD, 0x38, 0xB1, 0x2C, 0x01, 0xA5, 0x6B, 0x7A, 0x58, 0xD5, 0xC5,
            0x2E, 0x05, 0xD4, 0x16, 0xAB, 0x64, 0x25, 0xF6, 0x0F, 0xEA, 0x84, 0x97, 0x46, 0xB9, 0xEB, 0x92,
            0x66, 0x74, 0x21, 0x2D, 0x23, 0xE5, 0x80, 0x15, 0x0B, 0x44, 0xDE, 0xCC, 0x38, 0x25, 0x01, 0x84,
            0x32, 0x01, 0x74, 0xDE, 0xFB, 0xF6, 0xFE, 0x62, 0x78, 0xC3, 0xBF, 0xEE, 0x50, 0xE2, 0x8F, 0x20,
            0x82, 0x8C, 0x71, 0xBA, 0xE0, 0xDD, 0x80, 0x9C, 0x0C, 0x9D, 0x12, 0x61, 0xA0, 0xE3, 0xC5, 0xEC,
            0x61, 0xD9, 0xF5, 0x91, 0xE1, 0x2D, 0xE6, 0x4A, 0xC6, 0xE3, 0x97, 0x86, 0xA4, 0x76, 0xD5, 0x29,
            0x8B, 0x54, 0x0A, 0x39, 0x37, 0xFC, 0x72, 0xB2, 0x58, 0xA4, 0xD9, 0x9F, 0x55, 0x22, 0x9F, 0x83,
            0xD3, 0xE2, 0x2C, 0x09, 0xC7, 0xCE, 0x1B, 0x77, 0xCE, 0x05, 0xB5, 0x7E, 0x28, 0x3D, 0x46, 0xAF,
            0xCA, 0xCE, 0x33, 0x4E, 0x2A, 0x4C, 0xD8, 0x8B, 0xF2, 0xFC, 0xB0, 0x93, 0x5A, 0xF7, 0x08, 0xD5,
            0x1A, 0x6D, 0x67, 0x58, 0x0E, 0x5B, 0x09, 0x04, 0x2F, 0xF5, 0x39, 0x8A, 0xB9, 0x19, 0x43, 0x5A,
            0x69, 0xC9, 0x56, 0x0C, 0xE1, 0x83, 0x4D, 0x71, 0x27, 0x62, 0xF7, 0xC5, 0xFC, 0x4C, 0xF5, 0x9C,
            0x34, 0x5E, 0x07, 0x03, 0xC1, 0xF6, 0x2B, 0x03, 0x24, 0x1F, 0x9C, 0xBF, 0x47, 0x41, 0xE9, 0x13,
            0xD0, 0x0C, 0xE5, 0x83, 0x81, 0x45, 0xAC, 0xA8, 0xFB, 0x76, 0xD6, 0x19, 0x25, 0xA6, 0xD0, 0xDE,
            0x5C, 0xFF, 0x8D, 0x44, 0xBE, 0xC1, 0x4C, 0x8D, 0x2E, 0xA0, 0x4E, 0xA0, 0xB7, 0xC0, 0xA3, 0x36,
            0x58, 0x41, 0x3D, 0xD7, 0x04, 0xC3, 0x58, 0x5B, 0x61, 0xB3, 0xAD, 0xE3, 0x3D, 0x0F, 0x30, 0xD4,
            0x2E, 0xE6, 0x52, 0x69, 0x86, 0x40, 0x08, 0x53, 0x96, 0x91, 0x1F, 0x72, 0xAA, 0x7C, 0x4C, 0x8B,
            0x06, 0xEC, 0xD8, 0xE2, 0xD5, 0x45, 0x52, 0xB1, 0x90, 0xC3, 0xFA, 0xC9, 0x0D, 0x1E, 0x3F, 0x8D,
            0x6B, 0xD5, 0xCB, 0x72, 0x1C, 0xAD, 0x2D, 0xC9, 0x1F, 0x50, 0xBB, 0x43, 0xD0, 0x73, 0xEF, 0x50,
            0xBE, 0x69, 0xD4, 0xED, 0x5D, 0x8E, 0xC6, 0x1A, 0x09, 0x96, 0xDD, 0xFD, 0xF5, 0xBA, 0x66, 0xF4,
            0xFA, 0x15, 0x0E, 0x2E, 0xE8, 0x70, 0xFF, 0x03, 0xE4, 0xB6, 0x0A, 0x64, 0x2B, 0xBF, 0x7D, 0xB2
        };
    }
}
