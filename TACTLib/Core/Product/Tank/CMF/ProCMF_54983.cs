using static TACTLib.Core.Product.Tank.ManifestCryptoHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [ManifestCrypto(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_54983 : ICMFEncryptionProc
    {
        public byte[] Key(CMFHeader header, int length)
        {
            byte[] buffer = new byte[length];

            uint kidx = (uint) (header.m_buildVersion * length);
            for (int i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                switch (SignedMod(kidx, 3))
                {
                    case 0:
                        kidx += 103;
                        break;
                    case 1:
                        kidx = (uint)SignedMod(4 * kidx, header.m_buildVersion);
                        break;
                    case 2:
                        --kidx;
                        break;
                }
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length)
        {
            byte[] buffer = new byte[length];

            uint kidx = (uint) (2 * digest[5]);
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                switch (SignedMod(kidx, 3))
                {
                    case 0:
                        kidx += 103;
                        break;
                    case 1:
                        kidx = (uint)SignedMod(4 * kidx, header.m_buildVersion);
                        break;
                    case 2:
                        --kidx;
                        break;
                }
                
                buffer[i] ^= digest[SignedMod(header.m_buildVersion + kidx, SHA1_DIGESTSIZE)];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0xA1, 0x81, 0xCD, 0x19, 0x0B, 0x13, 0xE6, 0xC8, 0xBB, 0x73, 0x66, 0xD1, 0x79, 0x64, 0x06, 0x96, 
            0xA1, 0x13, 0x57, 0x3C, 0xB4, 0x6D, 0x18, 0x5C, 0x8A, 0x14, 0x59, 0x66, 0x59, 0x7E, 0x5C, 0x65, 
            0x25, 0xDF, 0x78, 0x05, 0xA7, 0x18, 0x93, 0xEB, 0xD6, 0x44, 0x19, 0xA5, 0x3A, 0x73, 0x57, 0xCB, 
            0x2A, 0xBB, 0x8D, 0x83, 0xA1, 0x6D, 0x01, 0xFB, 0x9B, 0x38, 0xBE, 0x0C, 0xF0, 0xCA, 0x16, 0xAB, 
            0xF7, 0x63, 0xCE, 0xAB, 0x6A, 0xA1, 0x3D, 0x51, 0x69, 0x75, 0xBA, 0x03, 0x87, 0x01, 0x5C, 0x9C, 
            0x12, 0x85, 0xD0, 0x21, 0xB7, 0xE4, 0x83, 0x4E, 0x39, 0xFE, 0xAE, 0x54, 0x57, 0x80, 0xA6, 0x73, 
            0xF0, 0x10, 0xDB, 0xEF, 0xD3, 0xC9, 0x17, 0x8A, 0xD6, 0xA8, 0x90, 0xAD, 0xFB, 0xE6, 0x05, 0x70, 
            0x4F, 0xDF, 0x78, 0xD7, 0xEA, 0x59, 0x24, 0xBF, 0xA0, 0x9E, 0x19, 0x32, 0xD3, 0x29, 0xDE, 0x07, 
            0x23, 0x03, 0xFE, 0x7F, 0xDC, 0x02, 0xEB, 0xBD, 0x7E, 0x5A, 0xC0, 0x9A, 0x1D, 0x89, 0x04, 0x8D, 
            0xED, 0xCD, 0x90, 0xD1, 0x7D, 0xC2, 0x19, 0x59, 0xEF, 0xFB, 0x97, 0xAA, 0x2D, 0x2F, 0x3C, 0x97, 
            0x5A, 0xDD, 0x03, 0x76, 0x0E, 0x95, 0x30, 0xEF, 0x6D, 0x3D, 0xF0, 0x76, 0xE3, 0x49, 0x27, 0x98, 
            0xBA, 0xF2, 0x5C, 0x47, 0xED, 0xAB, 0x84, 0x8D, 0x45, 0xCE, 0x57, 0x10, 0x95, 0x54, 0x01, 0xF5, 
            0x24, 0xBD, 0x4C, 0x47, 0xD7, 0x27, 0xAB, 0xBA, 0xEE, 0xFF, 0x00, 0xC1, 0xDD, 0x3C, 0x55, 0xA0, 
            0x25, 0xDD, 0x93, 0xBF, 0x62, 0x1B, 0xA1, 0x3B, 0x28, 0x4D, 0xD6, 0xF1, 0xA5, 0xD8, 0x9E, 0x8E, 
            0x16, 0x30, 0x94, 0x84, 0xE8, 0xC8, 0x68, 0xE3, 0x15, 0x80, 0xEE, 0xDA, 0x51, 0xDB, 0xA0, 0x70, 
            0x81, 0xFE, 0x87, 0x29, 0xF2, 0x3A, 0x63, 0x0E, 0xB5, 0xFC, 0x51, 0xC4, 0x55, 0xB9, 0x46, 0xA3, 
            0x59, 0xBA, 0xC3, 0x5B, 0xA9, 0x7F, 0x92, 0x97, 0x25, 0x20, 0x39, 0x82, 0xAA, 0x90, 0xCF, 0x0A, 
            0x08, 0x89, 0x89, 0x07, 0xFC, 0xFB, 0x52, 0x14, 0xD7, 0x71, 0xEB, 0x0F, 0x5A, 0x5D, 0x84, 0x7A, 
            0x72, 0xB3, 0x07, 0x95, 0x90, 0x1E, 0x0D, 0x03, 0xF0, 0xC6, 0x01, 0xC0, 0x48, 0x83, 0x67, 0xC3, 
            0x6B, 0x7F, 0xD6, 0x15, 0xB9, 0xF0, 0xD3, 0xCD, 0x65, 0x5A, 0x38, 0x65, 0x2D, 0xB9, 0x82, 0xC3, 
            0xB7, 0x90, 0x49, 0xCF, 0x67, 0x15, 0x71, 0xAC, 0x93, 0x53, 0x7A, 0xFA, 0x97, 0x03, 0xBD, 0xA0, 
            0xD6, 0x1E, 0x3E, 0x5D, 0x54, 0xE3, 0xA9, 0xC3, 0xCC, 0x5C, 0x33, 0xAA, 0x83, 0x00, 0x14, 0xF1, 
            0x7E, 0xBD, 0xE9, 0x3A, 0x2E, 0xF2, 0x5B, 0xFF, 0x6E, 0x03, 0xFD, 0x2D, 0x69, 0x1C, 0x56, 0x4E, 
            0x28, 0xF2, 0x74, 0xF9, 0x17, 0xEC, 0xDB, 0xF8, 0x0F, 0x2B, 0xDA, 0x2D, 0xBA, 0x3F, 0x0A, 0xEC, 
            0xBA, 0x1A, 0x76, 0xF2, 0x91, 0x99, 0xE5, 0xDA, 0xE4, 0x97, 0xDC, 0xE7, 0x72, 0x34, 0x8E, 0x0E, 
            0x9E, 0x66, 0xD6, 0xE3, 0xF6, 0x88, 0x5F, 0xD3, 0xFF, 0xC9, 0xAD, 0x6F, 0xD2, 0xF6, 0xEE, 0x60, 
            0x30, 0xBD, 0xF4, 0xC2, 0xC0, 0x30, 0x42, 0xBB, 0x28, 0xCA, 0xFE, 0x0A, 0x78, 0xAC, 0x59, 0x5E, 
            0xDC, 0x7D, 0x30, 0x9B, 0xE1, 0x05, 0x1F, 0x04, 0xDA, 0xE7, 0x99, 0x8B, 0x99, 0x46, 0x5D, 0xFA, 
            0xBF, 0xCF, 0x22, 0xE9, 0xE6, 0x24, 0xBC, 0x14, 0xE0, 0x5D, 0x84, 0xC2, 0x23, 0xFE, 0xF1, 0xB3, 
            0xB4, 0xF2, 0x02, 0xF0, 0xC5, 0x2A, 0xD6, 0x57, 0x60, 0x49, 0xB1, 0xBA, 0xB7, 0x20, 0x46, 0x04, 
            0xF3, 0xCC, 0xF6, 0x51, 0xDC, 0x2D, 0x97, 0xE2, 0xD8, 0xF1, 0xE1, 0xA3, 0x2D, 0x61, 0x33, 0xF6, 
            0xBA, 0x2C, 0xB1, 0xC7, 0x63, 0x9D, 0x41, 0x04, 0x79, 0x82, 0x7A, 0x65, 0x20, 0x6D, 0xA2, 0x27
        };
    }
}